import json

import requests
from brew_sales import models, serializers
from django.conf import settings
from django.db.models import Sum
from django.utils.decorators import method_decorator
from drf_yasg.utils import swagger_auto_schema
from rest_framework import status, viewsets
from rest_framework.decorators import action
from rest_framework.response import Response

BEARER_SECURITY = [{'Bearer': []}]


@method_decorator(name='list',
                  decorator=swagger_auto_schema(security=BEARER_SECURITY))
@method_decorator(name='create',
                  decorator=swagger_auto_schema(security=BEARER_SECURITY))
@method_decorator(name='total_sales',
                  decorator=swagger_auto_schema(security=BEARER_SECURITY))
class SalesItemViewSet(viewsets.ModelViewSet):
    queryset = models.SalesItem.objects.all()
    serializer_class = serializers.SalesItemSerializer
    http_method_names = ['post', 'get', 'delete']

    def _check_auth(self):
        """Check JWT auth token validity"""
        try:
            auth_token = self.request.META.get('HTTP_AUTHORIZATION', '')
        except IndexError:
            return Response(
                "Authorization header does not contain valid JWT token",
                status=status.HTTP_403_FORBIDDEN
            )
        headers = {'Content-type': 'application/json',
                   'Accept': 'application/json'}
        response = requests.post(
            settings.AUTH_SERVICE_VERIFY_JWT_URL,
            data=json.dumps({'token': auth_token}), headers=headers)
        if response.status_code != status.HTTP_200_OK:
            return Response(
                "Authorization header does not contain valid JWT token",
                status=status.HTTP_403_FORBIDDEN)

    def list(self, reqeust):
        """List all sales.

        in parameter: Authorization Header {'token': 'valid JWT auth token'}
        """
        result = self._check_auth() # Response is generated by the check auth
        if result:
            return result
        sales = self.get_queryset()
        serializer = self.serializer_class(sales, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

    def create(self, reqeust):
        """Create a sale.

        in parameter: Authorization Header {'token': 'valid JWT auth token'}
        """
        self._check_auth()
        sales_item = self.serializer_class(data=self.request.data)
        sales_item.is_valid(raise_exception=True)
        sales_item.save()
        return Response('Created sale', status=status.HTTP_201_CREATED)

    @action(methods=['get'], detail=False)
    def total_sales(self, request):
        """Get total amount of sales.

        in parameter: Authorization Header {'token': 'valid JWT auth token'}
        """
        result = self._check_auth() # Response is generated by the check auth
        if result:
            return result
        total_sales = models.SalesItem.objects.aggregate(
            total_sales=Sum("sales_amount"))
        if not total_sales['total_sales']:
            total_sales['total_sales'] = 0
        return Response(total_sales, status=status.HTTP_200_OK)
